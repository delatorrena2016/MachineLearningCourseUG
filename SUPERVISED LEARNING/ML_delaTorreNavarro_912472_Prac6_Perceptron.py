# -*- coding: utf-8 -*-
"""Neurona McCulloch-Pitts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C5P-hu41UMxyfUUbIvVU04HwLJCI_qls
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.datasets import make_blobs
from matplotlib.colors import ListedColormap
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split

def ActFunc(z):                                                                 #Función de activación
  if z >= 0:
    return 1
  else:
    return 0

def Prediction(c1,c2,w0,w1,w2):
  return ActFunc(np.sum([1*w0, c1*w1, c2*w2]))

def fit(x, y, epochs, LRate, verbose):                         #Training phase
  w0, w1, w2 = 0, 0.1, 0.1  
  for epoch in range(epochs):
    for i in range(0, X_train.shape[0]):
      target = y[i]
      Wupdate = LRate * (target - Prediction(x[i,0], x[i,1], w0, w1, w2))
      w1 += Wupdate * x[i,0]
      w2 += Wupdate * x[i,1]
      w0 += Wupdate
  return w0, w1, w2

def PredictBoundary(w0, w1, w2, x):
  return -(w1*x+w0)/w2

ANDv = [[0,0], [0,1], [1,0], [1,1]]                                             #Posibles valores compuerta AND



X, y = make_blobs(n_samples=40, centers=ANDv, cluster_std=0.1, n_features=2,
                   random_state=0)
y = [0 if i<3 else 1 for i in y]

X_train, X_test, y_train, y_test = train_test_split(
     X, y, test_size=0.3, random_state=42)

w0, w1, w2 = fit(X_train, y_train, epochs = 5, LRate = 0.1, verbose =True)
yPred= [Prediction(X_test[i,0],X_test[i,1],w0,w1,w2) for i in range(X_test.shape[0])]
cm = confusion_matrix(y_test, yPred, labels=[0, 1])
print(pd.DataFrame(cm,
 index=['True 0', 'True 1'],
 columns=['Predicted 0', 'Predicted 1']))

cmap_light = ListedColormap(["orange", "cornflowerblue"])
classes = ["False", "True"]
fig, ax = plt.subplots(nrows = 1, ncols = 1, figsize = (10., 10.), dpi = 120)
scatter = ax.scatter(X_train[:,0], X_train[:,1], s=100., c=y_train, cmap=cmap_light, alpha=0.5, label='train')
ax.scatter(X_test[:,0], X_test[:,1], s=100., c=yPred, cmap=cmap_light, marker='.', alpha=0.5, label='test')
ax.plot(np.array(ax.get_xlim()) , PredictBoundary(w0, w1,w2, np.array(ax.get_xlim())), '--', c='red', label='Hyperplane')
ax.set_xlabel('C1', fontsize=18)
ax.set_ylabel('C2', fontsize=18)
ax.set_title('Neurona McCulloch-Pitts''\n''n_samples='+str(40)+', centers='+str(4)+', cluster_std='+str(0.1), fontsize=20)
plt.xticks(np.asarray([0,1]))
plt.yticks(np.asarray([0,1])) 
ax.legend(fontsize=15)
#ax.legend(handles=scatter.legend_elements()[0], labels = classes)
plt.figtext(0.5, 0.01, r"$w_0$ = {:03.2f}, $w_1$ = {:03.2f}, $w_2$ = {:03.2f}".format(w0,w1,w2), ha="center", fontsize=18)
plt.show()

def r(h):
  for i in range(3):
    h += 1
  return h
h = 0
print(h, r(h), h)

